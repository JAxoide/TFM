from langchain_community.chat_models import ChatOpenAI
from document_processing import process_document  # ‚úÖ Solo si es necesario
from document_processing import load_document

def evaluate_risks(document_text):
    """
    Eval√∫a los riesgos regulatorios y √©ticos del documento analizando su contenido.
    Retorna una evaluaci√≥n categorizada de riesgos.
    """
    llm = ChatOpenAI(model_name="gpt-4-turbo")  # Usa GPT-4 Turbo

    prompt = f"""
   Eres un experto en regulaci√≥n y √©tica de la IA. Tu tarea es analizar el siguiente documento y generar un informe detallado sobre los riesgos regulatorios y √©ticos que pueda presentar el proyecto descrito.

### **Fase 1: Identificaci√≥n de Riesgos y Preguntas para el Usuario**
1. Analiza el documento y detecta riesgos en las siguientes categor√≠as:
   - Cumplimiento normativo (GDPR, AI Act, etc.).
   - Fairness y sesgos (g√©nero, raza, socioecon√≥micos, etc.).
   - Transparencia y explicabilidad del sistema.
   - Privacidad y seguridad de los datos.
   - Impacto social y √©tico.

2. Para cada posible riesgo identificado, genera **preguntas para el usuario** que ayuden a confirmar o descartar el riesgo. 
   - Ejemplo: Si detectas que el modelo usa datos demogr√°ficos sin explicaciones claras, pregunta:  
     *"El modelo diferencia las respuestas seg√∫n el g√©nero del usuario? ¬øC√≥mo se garantiza que esto no genere sesgos?"*

3. Devuelve solo las preguntas en una lista JSON bajo la clave `"questions"`. Espera la respuesta del usuario antes de generar el informe.

### **Fase 2: Generaci√≥n del Informe**
Tras recibir las respuestas del usuario, genera un informe con los siguientes apartados:

#### üìå **1. Identificaci√≥n de Riesgos**
- Enumera los riesgos confirmados tras la interacci√≥n con el usuario.
- Justifica cada riesgo con ejemplos espec√≠ficos del documento.

#### üõ† **2. Estrategias de Mitigaci√≥n**
- Prop√≥n soluciones detalladas para cada riesgo detectado.
- Explica c√≥mo estas estrategias ayudan a cumplir normativas y principios √©ticos.

#### üìù **3. Conclusiones**
- Resumen de la evaluaci√≥n realizada.
- Recomendaciones finales para reducir los riesgos del proyecto.

### **Datos del Documento:**
{document_text}

Responde en formato JSON con claves `"questions"` para la Fase 1 y `"report"` para la Fase 2.
"""

    response = llm.predict(prompt)
    return response  # Devuelve la evaluaci√≥n en JSON

document_text = load_document("data/ai_act_summary.txt")
risks = evaluate_risks(document_text)

print("Evaluaci√≥n de Riesgos:")
print(risks)